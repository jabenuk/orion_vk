/**
 * @mainpage Home
 *
 * Source code: <a href="https://github.com/jabenuk/orion_vk">jabenuk/<b>orion</b></a>
 *
 * @section section_main_Summary Summary
 *
 * The original goal of Orion was to run OpenGL without the annoyances of raw OpenGL code, but it
 * wasn't (and still isn't) really intended to be used in production or actual development. It's just
 * a fun project for me to work on in my own time.
 *
 * Now, I'm shifting my focus towards Vulkan, due to its (somewhat ridiculous, in a fun way)
 * explicit-ness and its priority on performance and optimisation. I also think the Vulkan specification
 * is lightyears ahead of the OpenGL specification - which is pretty abysmal at times - so hopefully
 * development will be a little less painful. Plus, the new Vulkan design is nice for me - I prefer
 * having structs with decent names and organisation than having a bunch of functions (although the OpenGL
 * functions were definitely more simple).
 *
 * Something else I want to have is actually decent documentation - so we'll see how that goes.
 *
 * @section section_main_IncludeFile Including
 *
 * There is one file to be included to make use of the 'core' library: @link orion.h @endlink.
 *
 * This is the public header for including Orion. All public library functionality is declared here, so the
 * page for this header will have all core functionality documented, pretty much.
 *
 * @section section_main_Modules Modules
 *
 * @ref group_Core "Core library" functions have been organised into the following modules:
 *  - @ref group_Meta "Library management": <i>functions that handle the initialisation, management, and
 * eventual termination of the library.</i>
 *  - @ref group_Errors "Error handling": <i>functionality to catch errors thrown by Orion at runtime.</i>
 *  - @ref group_VkAbstractions "Vulkan abstractions": <i>abstractions of the Vulkan API.</i>
 *      - @ref group_VkAbstractions_Core "Core Vulkan API": <i>core, general Vulkan functionality.</i>
 *          - @ref group_VkAbstractions_Debugging "Debugging": <i>utilities to debug Vulkan.</i>
 *      - @ref group_VkAbstractions_Layers "Layers and extensions": <i>Vulkan extensibility.</i>
 *
 * @section section_main_Debugging Debugging
 *
 *  > Orion provides the ability to set your own error callback, similar to OpenGL, Vulkan, GLFW, etc.
 *  > Despite the name, this callback is not just used for errors, but also debug log messages, notifications, and warnings, so it's
 *  > wise to consider it a 'debug callback' instead of specifically an 'error callback'. <i>(Although it is referred to as an 'error
 *  > callback' in this documentation)</i>.
 *
 * See the @ref page_Debugging "debugging" page for more information.
 * You should also see the @ref page_ErrorList "error index" for a comprehensive list of library errors.
 *
 * @section section_main_Config Configuration
 *
 * Global library @b flags can be set to change the behaviour of the library. To set these flags, use oriSetFlag().
 *
 * A list of library flags and what they do can be found below:
 *
 * | Flag name                                        | Description | Additional notes |
 * | ------------------------------------------------ | ----------- | ---------------- |
 * | ORION_FLAG_CREATE_INSTANCE_DEBUG_MESSENGERS      | Create an internal debug messenger for each instance (in oriCreateStateInstance()) so that calls to vkCreateInstance() and vkDestroyInstance() can be debugged. | Defaults to FALSE. <b>Requires the `VK_EXT_debug_utils` instance extension to be enabled before oriCreateStateInstance() calls.</b> |
 *
 */
