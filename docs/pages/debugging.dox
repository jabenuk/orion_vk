/**
 * @page page_Debugging Debugging
 *
 * For more function-specific documentation, see @ref group_Errors "Core Orion functionality/Error handling".
 *
 * @section section_Debugging_ErrorCallback Error callback
 *
 * Orion provides the ability to set your own error callback, similar to OpenGL, Vulkan, GLFW, etc.
 * Despite the name, this callback is not just used for errors, but also debug log messages, notifications, and warnings, so it's
 * wise to consider it a 'debug callback' instead of specifically an 'error callback'. <i>(Although it is referred to as an 'error
 * callback' in this documentation)</i>.
 *
 * To enable the debug callback, you need to specify the types of messages you want to see with oriEnableDebugMessages().
 * There is a default, built-in callback function which will be implicitly enabled, but you can set your own callback function with
 * oriSetErrorCallback().
 *
 * For information regarding the expected function signature of the callback, and the meaning of the parameters, see @ref oriErrorCallback.
 * An example of a custom error callback function can be seen below:
 * @code{.c}
    void errorcbfun(
        const char *name,
        unsigned int code,
        const char *message,
        oriErrorSeverityBit severity,
        void *pointer
    ) {
        char severitystr[256];

        switch (severity) {
            case ORION_ERROR_SEVERITY_VERBOSE_BIT:
                snprintf(severitystr, 256, "LOG");
                break;
            case ORION_ERROR_SEVERITY_NOTIF_BIT:
                snprintf(severitystr, 256, "NOTIFICATION");
                break;
            case ORION_ERROR_SEVERITY_WARNING_BIT:
                snprintf(severitystr, 256, "WARNING");
                break;
            case ORION_ERROR_SEVERITY_ERROR_BIT:
            default:
                snprintf(severitystr, 256, "ERROR");
                break;
            case ORION_ERROR_SEVERITY_FATAL_BIT:
                snprintf(severitystr, 256, "FATAL!");
                break;
        }

        printf("-----\nmessage: %s\ncode: %d (%s)\nseverity: %s\n", message, code, name, severitystr);
    }
 * @endcode
 *
 * Note that debug messages of type @c VERBOSE, @c NOTIF, and @c WARNING do not report any value to the @c name or @c code parameters.
 *
 * You do not need to do any filtering in your callback, this is handled by the library already.
 * But, of course, you could filter out specific error codes or names if you so wish. It's up to you.
 *
 * The @c pointer parameter allows you to pass any value to your callback. You specify this value in the call to oriSetErrorCallback().
 *
 * You can, at any point, set the error callback to be NULL. This will revert the program back to using the default, built-in error callback.
 * You could then set your own callback again later.
 *
 * <h2>Errors</h2>
 *
 * Whilst the contents of @c VERBOSE, @c NOTIF, and @c WARNING messages are 'magically' decided by whatever reported them, @c ERROR and
 * @c FATAL messages are more standardised and as such there is a limited amount of potential errors, quanitifed by their respective codes and names.
 *
 * For a list of errors, see the @ref section_ErrorList_Errors "error index".
 *
 * <h2>Severities</h2>
 *
 * | List of available error severities     | Description                                                           |
 * | -------------------------------------- | --------------------------------------------------------------------- |
 * | ORION_ERROR_SEVERITY_FATAL_BIT         | Errors that the program @b cannot @b recover @b from.                 |
 * | ORION_ERROR_SEVERITY_ERROR_BIT         | Significant but recoverable errors.                                   |
 * | ORION_ERROR_SEVERITY_WARNING_BIT       | Events that may cause problems, but are not directly too significant. |
 * | ORION_ERROR_SEVERITY_NOTIF_BIT         | General events, no problems reported.                                 |
 * | ORION_ERROR_SEVERITY_VERBOSE_BIT       | Almost @b every event that is happening.                              |
 *
 * These severity enums can (and should) be bit-masked when passing them to oriEnableDebugMessages().
 * No reported debug messages will have more than one severity bit enabled.
 *
 * @section section_Debugging_FunctionReturns Function return statuses
 *
 * Aside from the error callback, most Orion functions also return a status enum that describes how their execution went.
 * This only applies for functions that could encounter errors (most of the library, but not all).
 *
 * When a function returns a non-OK status, it is usually accompanied by an appropriate debug message (sent to the
 * @ref section_Debugging_ErrorCallback "error callback").
 *
 * For a list of possible function return status enums, see the @ref section_ErrorList_FunctionReturns "error index".
 *
 * @sa @subpage page_ErrorList
 * @sa @ref group_Errors "Core Orion functionality/Error handling"
 *
 */
